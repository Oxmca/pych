#Lab 1: Write a Python program to perform linear search

def linearSearch(array, n, x):

    # Going through array sequencially
    for i in range(0, n):
        if (array[i] == x):
            return i
    return -1


array = [2, 4, 0, 1, 9]
x = eval(input("enter the element to be searched: "))
n = len(array)
result = linearSearch(array, n, x)
if(result == -1):
    print("Element not found")
else:
    print("Element found at index: ", result)
##########################################################################################################################

#Lab 2: Write a Python program to insert an element into a sorted list

import bisect 
  
"""def insert(list, n):
    bisect.insort(list, n) 
    return list"""
  
# Driver function

list = [1, 2, 4]
n = eval(input("enter the value to be inserted "))
bisect.insort(list, n)
print(list)
#print(insert(list, n))
##########################################################################################################################

#Lab 3: Write a python program using object oriented programming to demonstrate encapsulation, overloading and inheritance

class Base:
    def __init__(self):
        self.a = 10
        self._b = 20
        
    def display(self):
         print(" the values are :")
         print(f"a={self.a} b={self._b}")

class Derived(Base):                                   # Creating a derived class
    def __init__(self):         
        Base.__init__(self)                        # Calling constructor of 
        self.d = 30
        
    def display(self):
        Base.display(self)
        print(f"d={self.d}")

    def __add__(self, ob):
        return self.a + ob.a+self.d + ob.d
        #return self.a + ob.a+self.d + ob.d+self.b + ob.b


obj2 = Derived()
obj3 = Derived()


obj2.display()
obj3.display()

print("\n Sum of two objects :",obj2 + obj3)
##########################################################################################################################

#Lab 4: Implement a python program to demonstrate

import pandas as pd
cars_data=pd.read_csv("Toyota.csv")

cars_data.head()

cars2 =cars_data.copy()
cars3 =cars_data.copy()

# identifying missing values(NaN -> Not a Number)
cars2.isna().sum()

#subsetting the rows that have one or more missing values 
missing = cars2[cars2.isnull().any(axis=1)]
missing

cars2.describe()

#calculating the meanvalue of the 'Age' variable
cars2['Age'].mean()

#To fill NA/NAN values using the specified value
cars2['Age'].fillna(cars2['Age'].mean(), inplace = True)
#cars2['KM'].fillna(cars2['KM'].median(), inplace = True)
#cars2['HP'].fillna(cars2['HP'].mean(), inplace = True)
cars2.isna().sum()

#imputing missing values of categorical variables
cars2['FuelType'].value_counts()

# to get the mode value of FuelType
cars2['FuelType'].value_counts().index[0]
cars2['FuelType'].fillna(cars2['FuelType'].value_counts().index[0], inplace = True)

cars2['MetColor'].fillna(cars2['MetColor'].mode()[0], inplace = True)

cars2.isna().sum()

print(cars_data.shape)
print(cars_data.index)
cars_data.ndim
##########################################################################################################################

#Lab 5: Implement a python program to demonstrate the following using NumPy

import numpy as np
import matplotlib.pyplot as plt

# Array manipulation, searching, sorting, and splitting
a = np.array([10, 5, 20, 15])
b = np.array([25, 30, 15, 20])

# Concatenate a and b arrays
c=np.concatenate((a, b))
print(c)

print("vertical stacking\n",np.vstack((a,b)))
print("horizontal stacking\n",np.hstack((a,b)))




# Find the index of the maximum value in the c array
max_index = np.argmax(c)
print(max_index)


# Sort the c array in descending order
d = np.sort(c)[::-1]
print(d)



# Split the d array into two arrays of equal size
e, f= np.array_split(d, 2)
print(e)
print(f)

#broadcasting  and plotting of NumPy arrays
import numpy as np
v=np.array([1,2,3])
w=np.array([4,5])
print("v=",v)
print("w=",w)
print("\n outer product of v and w is \n")
# Add a new array x using broadcasting
print(np.reshape(v,(3,1))*w)
print('')
x=np.array([[1,2,3],[4,5,6]])
print("x=",x)
print("v=",v)
print("\n x+v=",x+v)
print("")
print("\n transposing this final result")
print((x.T+w).T)
print("")
#Multiply x array by a constant
print(x*2)


# Plot the x and y arrays
# Plot the x and y arrays
x=np.arange(0,3 * np.pi, 0.1)
y_sin=np.sin(x)
y_cos=np.cos(x)
plt.plot(x, y_sin)
plt.plot(x,y_cos)
plt.show()
##########################################################################################################################

#Lab 6:  Implement a python program to demonstrate Data visualization with various Types of Graphs using matplotlib

import numpy as np
import matplotlib.pyplot as plt
###line plot
x1=[1,2,3,4,5]
y1=[2,5,2,6,8]
x2=[1,2,3,4,5]
y2=[4,5,8,9,10]
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.title("LINE PLOT")
plt.plot(x1,y1)
plt.plot(x2,y2)
plt.grid()
plt.show()

###Scatter plot
x1=[1,2,3,4,5]
y1=[2,5,2,6,8]
x2=[1,2,3,4,5]
y2=[4,5,8,9,10]
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.title("scatter")
plt.scatter(x1,y1)
plt.scatter(x2,y2)
plt.plot(x2,y2)
plt.show()

# Bar chart
labels = ['A', 'B', 'C', 'D', 'E']
values = [10, 20, 30, 40, 50]
plt.bar(labels, values)
plt.title("Bar Chart")
plt.xlabel("Labels")
plt.ylabel("Values")
plt.show()

# Histogram
h=np.random.randint(10,70,100)
plt.title("HISTOGRAM")
plt.hist(h,rwidth=0.8)
plt.show()


# Pie chart
labels = ['A', 'B', 'C', 'D', 'E']
values = [10, 20, 30, 40, 50]
plt.pie(values, labels=labels)
plt.title("Pie Chart")
plt.show()
##########################################################################################################################

#Lab 7.Write a Python program that creates a mxn integer arrayand Prints its attributes using Numpy

import numpy as np
a=np.array([[1,2,3],[4,5,6],[7,8,9]])


print("printing numpy array attributes")
print("1)Array dimension:",a.ndim)
print("2)Array shape:",a.shape)
print("3)Array size:",a.size)
print("4)Array data type:",a.dtype)
print("5)the length of each array item in bytes is:",a.itemsize)
##########################################################################################################################

#Lab8 Linear Regression
import numpy as np
import matplotlib.pyplot as plt

# Generate some random data
x = np.array([1, 1, 3, 4, 5])
y = np.array([2, 1, 5, 4, 5])

# Calculate the slope and intercept of the linear regression line
slope, intercept = np.polyfit(x, y, 1)

# Print the slope and intercept
print("Slope:", slope)
print("Intercept:", intercept)

# Plot the data and regression line
plt.scatter(x, y)
plt.plot(x, slope * x + intercept, color="red")
plt.xlabel("x")
plt.ylabel("y")
plt.title("Linear Regression")
plt.show()
##########################################################################################################################

#Lab9 Logistic Regression
import numpy as np
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt


# Generate some sample data
X = np.array([[1, 2], [2, 4], [3, 6], [4, 8], [5, 10]])
y = np.array([0, 0, 0, 1, 1])

# Create a logistic regression model and fit the data
model = LogisticRegression()
model.fit(X, y)

# Print the coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Use the model to predict new data
new_data = np.array([[6, 12], [7, 14]])
predictions = model.predict(new_data)
print("Predictions:", predictions)

# Plot the data points and the linear regression line
plt.scatter(X[:, 0], y, color='blue')
plt.plot(X[:, 0], model.predict(X), color='red')
plt.title("Logistic Regression Model")
plt.xlabel("X")
plt.ylabel("y")
plt.show()
##########################################################################################################################

#Lab 10: Write a Python program to demonstrate Timeseries analysis with Pandas.

import pandas as pd
df = pd.read_csv("aapl.csv",parse_dates=["Date"], index_col="Date")
df.head()

df.index

# (1) Partial Date Index: Select Specific Months Data
df.loc['2017-06-30']

df.loc["2017-01"]

df.loc['2017-06'].head() 

df.loc['2017-06'].Close.mean()

df.loc['2017'].head(2) 

df['2017-01-08':'2017-01-03']

df.loc['2017-01']

df['Close'].resample('M').mean().head()

df.loc['2016-07']

%matplotlib inline
df['Close'].plot()

df['Close'].resample('M').mean().plot(kind='bar')
##########################################################################################################################

#Lab 11: Write a Python program to demonstrate Data Visualization using Seaborn.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

cars_data = pd.read_csv('Toyota.csv', index_col=0, na_values=["??","????"])
cars_data.dropna(axis=0, inplace= True)
sns.set(style="darkgrid")
sns.regplot(x=cars_data['Age'],y= cars_data['Price'])

# scatter plot of Price and age without the regeression fitline
sns.regplot(x=cars_data['Age'],y= cars_data['Price'],marker='*' ,fit_reg=False)

# scatter plot of price vs age by FuelType
sns.lmplot(x='Age',y='Price', data=cars_data, fit_reg=False, hue="FuelType", legend=True, palette="Set1")

#distribution of the variable 'Age'
sns.histplot(cars_data['Age'])

sns.histplot(cars_data['Age'],kde=False, bins = 8)

# frequency distribution of categorical variable 'fuelType'
sns.countplot(x="FuelType", data=cars_data)

#grouped bar plot of FuelType and Automatic
sns.countplot(x="FuelType", data=cars_data, hue="Automatic")

# frequency distribution of categorical variable 'fuelType'
sns.countplot(x="FuelType", data=cars_data)

#Box and Whiskers plot for nmerical vs categorial variables
sns.boxplot(x= cars_data["FuelType"], y=cars_data["Price"])

#grouped box and Whiskers plot
sns.boxplot(x= cars_data["FuelType"], y=cars_data["Price"], hue="Automatic", data= cars_data)
##########################################################################################################################